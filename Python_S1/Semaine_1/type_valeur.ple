// PYTHON 3, l'association d'une expression avec son type.


// Documentation disponibmatchlistle ici : #docs/main/doc/programing/exercise/langage


// Choix de l'environnement d'exécution node ou python
sandbox = "python"

// Définition des champs de réponse : #docs/components/

RadioGroup = :wc-radio-group
RadioGroup.autoValidation = True

// Affichage de documents théoriques : #docs/main/doc/programing/exercise/theories

theories = [
  { title: "Lien vers une ressource externe", url: "https://docs.python.org/fr/3/library/stdtypes.html" },
  { title: "Lien vers une ressource interne", url: @copyurl readme.md }
]

// Affichage d'aides : #docs/main/doc/programing/exercise/hints

hint = ["Faites attention aux guillemets, s'ils existent",
        "Regarder le premier lien disponible dans Théorie"]

// Construction, Affichage et Évaluation : #docs/main/doc/programing/exercise/workflow



builder==#!lang=python
import random

random_entier = random.randint(0, 10000)
random_float = round(random.uniform(0.09, 9999.99), 3)
random_bool = bool(random.getrandbits(1))
random_char = random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ')
random_string = random.choice(("\"Bonjour\"", "\"UGE\"", "\"Informatique\""))

random_list = random.sample([random_bool, random_float,
                            random_entier, random_char, random_string, None, []],
                            random.randint(1, 7))

random_list = [
                random_string, 
                f"\"{random_entier}\"", random_entier,
                random_bool,
                f"\"{random_float}\"", random_float,
                f"\"{random_char}\"",
                random_list,
                None
                ]

all_types = ["str", "int", "float", "list", "bool" ,"NoneType"]


"""
  IN python3:
  Text Type:			str
  Numeric Types:	int, float, complex
  Sequence Types:	list, tuple, range
  Mapping Type:		dict
  Set Types:			set, frozenset
  Boolean Type:		bool
  Binary Types:		bytes, bytearray, memoryview
  None Type:			NoneType

  les types qu'on ne veut pas utiliser: memoryview, frozenset, complex, bytes, bytearray
"""


random_choix = random.choice(random_list)


RadioGroup['items'] = all_types
sol = str(type(random_choix)).split()[1][1:-2]

# la solution
bons_reponses = f"Le type de <b>{random_choix}</b> est <b>{str(type(random_choix)).split()[1][1:-2]}</b><br>"
une_expression = f"<b>{random_choix}</b>"


plusgrade = sum([ 1 if x == 100 else 0 for x in meta['grades'] ])

statement=  f"<b>{random_choix}</b> <br/> Tentatives {nsucc}/{ntry}"
==

ntry = 0
nsucc=0

grader==

ntry += 1


grade = -1

count = 0

feedback['type'] = "error"
feedback['content'] = f"Mauvaise réponse, {bons_reponses} "

# // ce if serve à verifier si l'étudiant a choisi quelque chose
# if not RadioGroup['selection']:
#   raise Exception("Vous devez choisir quelque chose")

if (RadioGroup['selection']):
  if (RadioGroup['selection'] == sol):
    
    grade = 1
    nsucc += 1
    feedback['type'] = "success"
    feedback['content'] = "Bonne réponse  "
  else:
    grade = 0


RadioGroup['selection'] = None

if nsucc > 3 and (nsucc / ntry) > 0.5:
  grade=100
  feedback['content'] = "Bravo, vous pouvez passer à l'exercise suivant!"
else:
  exec(builder)

==


title==
Deviner le type de l'expression suivante:
==



form==
{{RadioGroup}}
==

solution==
{{bons_reponses}}
==
